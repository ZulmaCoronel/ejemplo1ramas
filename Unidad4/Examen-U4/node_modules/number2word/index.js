module.exports = function(lang, space) {

    this.num = 0;
    this.lang = (['it','en'].indexOf(lang) >= 0) ? lang : 'it';
    this.space = typeof space !== 'undefined' ? ' ' : '';
    this.dictionary  =
        { 'it':
            {
                0: '',
                1: 'uno',
                2: 'due',
                3: 'tre',
                4: 'quattro',
                5: 'cinque',
                6: 'sei',
                7: 'sette',
                8: 'otto',
                9: 'nove',
                10: 'dieci',
                11: 'undici',
                12: 'dodici',
                13: 'tredici',
                14: 'quattordici',
                15: 'quindici',
                16: 'sedici',
                17: 'diciassette',
                18: 'diciotto',
                19: 'diciannove',
                20: 'venti',
                30: 'trenta',
                40: 'quaranta',
                50: 'cinquanta',
                60: 'sessanta',
                70: 'settanta',
                80: 'ottanta',
                90: 'novanta',
                100: 'cento',
                1000: 'mille',
                2000: 'mila',
                1000000: 'un'+this.space+'milione',
                2000000: this.space+'milioni',
                1000000000: 'un'+this.space+'miliardo',
                2000000000: this.space+'miliardi'
            },
            'en':
            {
                0: '',
                1: 'one',
                2: 'two',
                3: 'three',
                4: 'four',
                5: 'five',
                6: 'six',
                7: 'seven',
                8: 'eight',
                9: 'nine',
                10: 'ten',
                11: 'eleven',
                12: 'twelve',
                13: 'thirteen',
                14: 'fourteen',
                15: 'fifteen',
                16: 'sixteen',
                17: 'seventeen',
                18: 'eighteen',
                19: 'nineteen',
                20: 'twenty',
                30: 'thirty',
                40: 'fourty',
                50: 'fifty',
                60: 'sixty',
                70: 'seventy',
                80: 'eighty',
                90: 'ninety',
                100: 'hundred',
                1000: 'one'+this.space+'thousand',
                2000: this.space+'thousand',
                1000000: 'one'+this.space+'milion',
                2000000: this.space+'milions',
                1000000000: 'one'+this.space+'bilion',
                2000000000: this.space+'bilions'
            }
        }
    ;

    this.convert = function(num) {
        this.num = num;
        if (isNaN(this.num)) {
            return false;
        }

        if ((this.num >= 0 && this.num < 0) || this.num < 0 - Number.MAX_SAFE_INTEGER) {
            throw new Error('convert_number_to_words only accepts numbers between -' + Number.MAX_SAFE_INTEGER + ' and ' . Number.MAX_SAFE_INTEGER);
        }

        var numberArray = this.num.toString().split('').reverse();
        var dim = numberArray.length;
        var newDim = Math.ceil(dim / 3.0) * 3;
        var tripledArray = [];
        for(var i=0; i<newDim; i++) {
            tripledArray[i] = (numberArray[i]) ? parseInt(numberArray[i]) : 0;
        }
        var ret = "";
        var key = newDim - 1;
        while(key > 0) {
            ret += this.convertTriad(tripledArray[key], numberArray[key-1], numberArray[key-2], Math.floor(key/3)) + this.space;
            key = key - 3;
        }
        return this.correct(ret);
    };

    this.convertTriad = function (hundreds, tens, units, step)
    {
        step = typeof step !== 'undefined' ? step : 0;
        var ret = "", suffix;
        switch(step) {
            case 0:
                suffix = "";
                break;
            case 1:
                suffix = this.dictionary[this.lang][2000];
                break;
            case 2:
                suffix = this.dictionary[this.lang][2000000];
                break;
            case 3:
                suffix = this.dictionary[this.lang][2000000000];
                break;
            default:
                suffix = "";
                break;
        }
        if(hundreds && hundreds>0) {
            ret += (hundreds==1) ? this.dictionary[this.lang][100] : this.dictionary[this.lang][hundreds] + this.dictionary[this.lang][100];
        }
        if(tens && tens>0) {
            if(tens==1) {
                ret += this.dictionary[this.lang]['1'+units];
                units = 0;
            } else {
                ret += this.dictionary[this.lang][tens*10];
            }
        }
        if(units && units>0) {
            if(units==1 && !tens) {
                suffix = "";
                var power = step * 3;
                var position = Math.pow(10, power);
                ret += this.dictionary[this.lang][position];
            } else {
                ret += this.dictionary[this.lang][units];
            }
        }
        return (ret) ? ret + suffix : ret;
    };

    this.correct = function (str)
    {
        switch (this.lang) {
            case 'it':
                str = str.replace("au","u");
                break;
            default:
                break;
        }
        str = str.replace(/\s{2,}/, '').replace(/\s*$/, '');
        return str;
    }
};