var ntw  = require('number2word');

module.exports = function() {

    this.exclude = ['il','lo','la','i','gli','le','degli','della','dei','del','di','via','vico','vicolo','viale','strada','campo'];

    this.add = function (index, element) {
        if(this.exclude.indexOf(element) == -1) {
            if(!this.ret.hasOwnProperty(index)) {
                this.ret[index] = [];
            }
            if(this.ret[index].indexOf(element) == -1) {
                this.ret[index].push(element);
            }
        }
    };

    this.sort = function() {
        // ordina l'array per lunghezza delle stringhe
        for (var property in this.ret) {
            if (this.ret.hasOwnProperty(property)) {
                this.ret[property].sort(function(a, b){
                    return b.length - a.length;
                });
            }
        }
    };

    this.parse = function (str) {

        var list, current = '', num2word = new ntw('it');
        this.ret = {};

        var kmStr = str.match(/km\s*[0-9]+/i);
        if(kmStr) {
            console.log(str, kmStr[0]);
            // l'indirizzo contiene un riferimento chilometrico
            this.add('km', kmStr[0].replace(/km\s*/i, ''));
        }

        list = str.split(' ');
        for (var i = 0; i < list.length; i++) {
            current += list[i] + ' ';
            switch (this.toType(list[i])) {
                case 'string':
                    this.add('province', list[i]);
                    this.add('district', list[i]);
                    this.add('address', list[i]);
                    this.add('address', current.trim());
                    var numList = current.match(/[0-9]+/);
                    if(numList) {
                        for(var j=0; j<numList.length; j++) {
                            var word = num2word.convert(numList[j]);
                            this.add('address', current.trim().replace(numList[j], word));
                        }
                    }
                    break;
                case 'number':
                    this.add('streetNum', list[i]);
                    break;
                default:
                    break;
            }
        }

        this.sort();

        return this.ret;
    };

    this.toType = function(obj) {
        if(!isNaN(parseFloat(obj)))
            return 'number';
        return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };
};